--recursive query to display position of all occurences of a string in a given string.


delimiter $$
create function findalloccurrences(mainstring varchar(255), substring varchar(255))
returns varchar(1024)
deterministic
begin
declare positions varchar(1024);
declare startpos int default 1;
declare position int;
while startpos > 0 do
set position = locate(substring, mainstring, startpos);
if position > 0 then
set positions = concat_ws(',', positions, position);
set startpos = position + 1;
else
set startpos = 0;
end if;
end while;
return positions;
end $$

delimiter ;


--function to return position Nth occurence of a string in a given string.


delimiter $$
create function findnthoccurrence(mainstring varchar(255), substring varchar(255), n int)
returns int
deterministic
begin
declare startpos int default 1;
declare position int;
declare countoccurrences int default 0;
while startpos > 0 do
set position = locate(substring, mainstring, startpos);
if position > 0 then
set countoccurrences = countoccurrences + 1;
if countoccurrences = n then
return position;
end if;
set startpos = position + 1;
else
set startpos = 0;
end if;
end while;
return 0; -- return 0 if the nth occurrence is not found
end $$


--------------------------------------------------------------------------
                                day 5

5th day 

OLAP()
(on line analytical processing)




delimiter //
create procedure sp_name( database_name varchar(50))
begin

declare tname varchar(100);
declare flag bit default 0;
declare c1 cursor for 
select table_name from infromation_schema.tables where table_scema = database_name;

declare continue handler for not found set flag =1; 

drop table if exists tabcnt;
create temporary table tabcnt(tabname varchar(100),cnt int);

open c1;
myloop:LOOP

fetch c1 into tname;
if flag = 1 then 
leave myloop;
else 
insert into tabcnt(tabname, cnt) values(tname,null);
end if;
end loop myloop;
close c1;
select * from tabcnt;
drop table if exists tabcnt;
END //

DELIMITER ;
//--------------------------------------------------------------------------------
//recursive cte factorial

with recursive fact as(
     select 9 as number,
    1 as factorial
    
     union all
     select number -1,factorial*number from fact where number>1
     )
     select factorial from fact where number = 1;


//recursive cte for fibonacci series


WITH RECURSIVE fibo AS (
    SELECT 0 AS prev_no, 1 AS curr_no, 1 AS next_no

    UNION ALL

    SELECT
        curr_no,
        next_no,
        curr_no + next_no
    from fibo
    where curr_no + next_no <= 100 
)
SELECT next_no 
FROM fibo;
----------------------------------explaination of above ---------------------------
Iteration 0 (Initialization):

prev_no = 0, curr_no = 1, next_no = 1
This row is the result of the first SELECT in the CTE.
Iteration 1:

The second SELECT in the CTE is executed with the values from the previous row:
curr_no from the previous row (1) becomes the new prev_no.
next_no from the previous row (1) becomes the new curr_no.
The new next_no is calculated as curr_no + prev_no = 1 + 1 = 2.
This new row is appended to the result set using UNION ALL.
Iteration 2:

Again, the second SELECT is executed with the values from the previous row (1, 1, 2):
curr_no from the previous row (1) becomes the new prev_no.
next_no from the previous row (2) becomes the new curr_no.
The new next_no is calculated as curr_no + prev_no = 1 + 2 = 3.
This new row is appended to the result set using UNION ALL.
===========================================================================
with recursive ascii_tab as
(
select cast(0 as varchar(10)) as first_character 

union all

select 
	CAST(first_character + 1 AS VARCHAR(10)) from ascii_tab where CAST(first_character AS INTEGER) + 1 <= 255
) 
select first_character from ascii_tab;

------------------------------------------there is some syntax error .
error fix code from gpt


WITH RECURSIVE ascii_tab AS (
    SELECT CAST(0 AS UNSIGNED) AS ascii_code

    UNION ALL

    SELECT
        ascii_code + 1
    FROM
        ascii_tab
    WHERE
        ascii_code + 1 <= 255
)
SELECT
    ascii_code,
    convert(CHAR(ascii_code),char) AS ascii_character
FROM
    ascii_tab;




===========================================================================
---------------------------------------------------------------------  



Write a procedure that takes input a string and returns name all 
the tables and their corresponding columns which contain that string as part of the actual data anywhere 


create procedure sp_gettabcol(colname varchar(100))
Begin
declare tname varchar(100);
declare flag bit default 0;
declare columnName varchar(100);
declare stmt varchar(255);
create temporary table if not exists searchresult(tablename varchar(100),columnname varchar(100);
declare c1 cursor for select table_name from information_schema.tables where table_schema =DATABASE();
declare continue handler for not found set done=1;
open c1;
myloop:loop
fetch c1 into tablename;
if done =1 then
leave myloop;
end if;
declare c2 cursor for select column_name 
from information_schema.columns
where table_name=tableName and table_chema =DATABASE();
open c2;
myloop1=loop
fetch c2 into columnName;
if done=1 then 
leave myloop1;
end if;
set @stmt = concat('select * from',tablename,'where',columnname,'like''%',srchstr

------------------------------------------------------------------------------

with recursive SQR as(
select  1 as number,
number*number as square 

union all 

select number, square from SQR where 

)


select * from salesperson s where s.city <> all (select c.city from customer c where c.snum= s.snum);


select *  from orders o join salespeople i on o.snum=i.snum where city = 'london';  

select * from customers c join salespeople s on s.snum=s.snum where s.sname ='motika' or s.sname ='peel';

select * from salespeople o  where exists (select *from customers c where o.city=c.city and o.snum<>c.snum);

count the number of the salespeople registring orders for each day . if a slasperson has more than one order on a given day , he oe she should be counted only once.

SELECT
    O.ODATE,
    S.SNUM,
    S.SNAME,
    COUNT(DISTINCT O.ONUM) AS OrdersCount
FROM
    Orders O
JOIN
    Salespeople S ON O.SNUM = S.SNUM
GROUP BY
    O.ODATE, S.SNUM, S.SNAME
ORDER BY
    O.ODATE, S.SNUM;
-----------------------------------------------------------------------------



delimiter ;
